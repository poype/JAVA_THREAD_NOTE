现代处理器都包含了对CAS的直接支持，CAS这个操作是原子的。
AtomicInteger和AtomicReference这两个类要重点关注

原子变量提供了与volatile类型变量相同的内存语义

CAS操作包含了3个参数：变量当前的值V、进行比较的值A、拟写入的新值B
                   当且仅当V等于A时，CAS才会通过原子的方式将变量设置成B，否则不会执行任何操作。
                   无论变量的值是否被更新，都会返回变量的旧值V
SimulatedCAS类的代码是对CAS操作的一个模拟，可以用其理解CAS操作，但要注意CAS操作是CPU直接支持的

CAS的典型用法：先读取变量的值A，根据A计算新值B
             计算之后的时刻，变量的值记作V
             通过CAS以原子的形式将变量的值更新为B(如果变量的值没发生变化，即A == V)
CasCounter是对CAS的用法进行的模拟

原子变量类都是基于CAS的，例如AtomicInteger、AtomicLong、AtomicBoolean、AtomicReference等
当竞争程度不高时，基于CAS的计数器在性能上远远超过了基于锁的计数器，而在没有竞争时甚至更高。
在中低程度的竞争下，原子变量(CAS)能提供更高的可伸缩性。而在高强度的竞争下，锁能够更有效的避免竞争。
在实际情况中，原子变量在可伸缩性上要高于锁，因为常见的竞争强度都不会非常的高，所以原子变量的效率会更高。
在竞争强度非常大的时候，由于CAS的冲突概率大大增加，这时加锁的效率会比CAS更高。但正常情况下竞争强度都不会那么大。


